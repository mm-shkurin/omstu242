using System;

class Pechka
{
    public int Temperature { get; set; }
    public string Mode { get; set; }
}

class Bread : Pechka
{
    public string Name { get; set; }
    public int CookingTime { get; set; }
}

class Cake : Pechka
{
    public string Name { get; set; }
    public string[] Ingredients { get; set; }
    public int CookingTime { get; set; }
}

class Program
{
    const int MaxItems = 100;
    static Bread[] breads = new Bread[MaxItems];
    static Cake[] cakes = new Cake[MaxItems];
    static int breadCount = 0;
    static int cakeCount = 0;

    static void Main()
    {
        while (true)
        {
            Console.WriteLine("\nMenu:");
            Console.WriteLine("1) Add bread information");
            Console.WriteLine("2) Add cake information");
            Console.WriteLine("3) Show cooking times");
            Console.WriteLine("4) Filter by temperature");
            Console.WriteLine("5) Exit");
            Console.Write("Choose an option: ");

            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    AddBread();
                    break;
                case "2":
                    AddCake();
                    break;
                case "3":
                    ShowCookingTimes();
                    break;
                case "4":
                    FilterByTemperature();
                    break;
                case "5":
                    return;
                default:
                    Console.WriteLine("Invalid choice. Please try again.");
                    break;
            }
        }
    }

    static void AddBread()
    {
        if (breadCount >= MaxItems)
        {
            Console.WriteLine("Maximum number of breads reached.");
            return;
        }

        Bread bread = new Bread();
        Console.Write("Enter bread name: ");
        bread.Name = Console.ReadLine();
        Console.Write("Enter cooking temperature: ");
        bread.Temperature = int.Parse(Console.ReadLine());
        Console.Write("Enter cooking mode: ");
        bread.Mode = Console.ReadLine();
        Console.Write("Enter cooking time (in minutes): ");
        bread.CookingTime = int.Parse(Console.ReadLine());

        breads[breadCount++] = bread;
        Console.WriteLine("Bread information added.");
    }

    static void AddCake()
    {
        if (cakeCount >= MaxItems)
        {
            Console.WriteLine("Maximum number of cakes reached.");
            return;
        }

        Cake cake = new Cake();
        Console.Write("Enter cake name: ");
        cake.Name = Console.ReadLine();
        Console.Write("Enter cooking temperature: ");
        cake.Temperature = int.Parse(Console.ReadLine());
        Console.Write("Enter cooking mode: ");
        cake.Mode = Console.ReadLine();
        Console.Write("Enter cooking time (in minutes): ");
        cake.CookingTime = int.Parse(Console.ReadLine());

        Console.WriteLine("Enter cake ingredients (type 'end' to finish):");
        string[] ingredients = new string[MaxItems];
        int ingredientCount = 0;

        while (true)
        {
            string ingredient = Console.ReadLine();
            if (ingredient.ToLower() == "end" || ingredientCount >= MaxItems)
                break;
            ingredients[ingredientCount++] = ingredient;
        }

        cake.Ingredients = new string[ingredientCount];
        Array.Copy(ingredients, cake.Ingredients, ingredientCount);

        cakes[cakeCount++] = cake;
        Console.WriteLine("Cake information added.");
    }

    static void ShowCookingTimes()
    {
        Console.WriteLine("Bread cooking times:");
        for (int i = 0; i < breadCount; i++)
        {
            Console.WriteLine($"{breads[i].Name}: {breads[i].CookingTime} minutes");
        }

        Console.WriteLine("Cake cooking times:");
        for (int i = 0; i < cakeCount; i++)
        {
            Console.WriteLine($"{cakes[i].Name}: {cakes[i].CookingTime} minutes");
        }
    }


static void FilterByTemperature()
    {
        Console.Write("Enter temperature to filter: ");
        int temp = int.Parse(Console.ReadLine());

        Console.WriteLine("Breads cooked at the specified temperature:");
        for (int i = 0; i < breadCount; i++)
        {
            if (breads[i].Temperature == temp)
            {
                Console.WriteLine($"{breads[i].Name} (Mode: {breads[i].Mode}, Time: {breads[i].CookingTime} minutes)");
            }
        }

        Console.WriteLine("Cakes cooked at the specified temperature:");
        for (int i = 0; i < cakeCount; i++)
        {
            if (cakes[i].Temperature == temp)
            {
                Console.WriteLine($"{cakes[i].Name} (Mode: {cakes[i].Mode}, Time: {cakes[i].CookingTime} minutes)");
                Console.WriteLine("Ingredients: " + string.Join(", ", cakes[i].Ingredients));
            }
        }
    }
} 