
using System;

class Program
{
    class Student
    {
        public string FullName { get; set; }
        public int YearOfBirth { get; set; }
        public string Class { get; set; }
        public string[] PhoneNumbers { get; set; }

        public override string ToString()
        {
            return $"FIO: {FullName}, Year of birth: {YearOfBirth}, Class: {Class}, Phone number: {string.Join(", ", PhoneNumbers)}";
        }
    }

    static void Main(string[] args)
    {
        const int MaxStudents = 100;
        Student[] students = new Student[MaxStudents];
        int studentCount = 0;

        while (true)
        {
            Console.WriteLine("Menu:");
            Console.WriteLine("1. Data base");
            Console.WriteLine("2. Selection by the year of birth");
            Console.WriteLine("3. Selection by class");
            Console.WriteLine("4. Exit");

            Console.Write("Enter menu point: ");
            if (!int.TryParse(Console.ReadLine(), out int choice))
                continue;

            switch (choice)
            {
                case 1:
                    FillDatabase(students, ref studentCount);
                    break;
                case 2:
                    QueryByYearOfBirth(students, studentCount);
                    break;
                case 3:
                    QueryByClass(students, studentCount);
                    break;
                case 4:
                    return;
                default:
                    Console.WriteLine("Error. Try again.");
                    break;
            }
        }
    }

    private static void FillDatabase(Student[] students, ref int studentCount)
    {
        if (studentCount >= students.Length)
        {
            Console.WriteLine("Database is full.");
            return;
        }

        Console.Write("How many students do you want to add? ");
        if (!int.TryParse(Console.ReadLine(), out int count) || count <= 0)
        {
            Console.WriteLine("Error.");
            return;
        }

        for (int i = 0; i < count && studentCount < students.Length; i++)
        {
            var student = new Student();

            Console.Write($"Student's FIO {studentCount + 1}: ");
            student.FullName = Console.ReadLine();

            Console.Write($"Student's year of birth {studentCount + 1}: ");
            if (!int.TryParse(Console.ReadLine(), out int year))
            {
                Console.WriteLine("Error.");
                continue;
            }
            student.YearOfBirth = year;

            Console.Write($"Student's class {studentCount + 1}: ");
            student.Class = Console.ReadLine().ToUpperInvariant();

            Console.Write($"Student's phone numbers (separated by spaces) {studentCount + 1}: ");
            student.PhoneNumbers = Console.ReadLine().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

            students[studentCount++] = student;
        }

        Console.WriteLine($"{count} students added successfully.");
    }

    private static void QueryByYearOfBirth(Student[] students, int studentCount)
    {
        if (studentCount == 0)
        {
            Console.WriteLine("Database is empty. Add students.");
            return;
        }

        Console.Write("Year of birth for search: ");
        if (!int.TryParse(Console.ReadLine(), out int year))
        {
            Console.WriteLine("Error.");
            return;
        }

        bool found = false;
        Console.WriteLine($"Students born in the year {year}:");
        for (int i = 0; i < studentCount; i++)
        {
            if (students[i].YearOfBirth == year)
            {
                Console.WriteLine(students[i].ToString());
                found = true;
            }
        }

        if (!found)
        {
            Console.WriteLine($"No students born in the year {year}.");
        }
    }

    private static void QueryByClass(Student[] students, int studentCount)
    {
        if (studentCount == 0)
        {
            Console.WriteLine("Database is empty. Add students.");
            return;
        }

        Console.Write("Student's class: ");
        var targetClass = Console.ReadLine().ToUpperInvariant();

        bool found = false;
        Console.WriteLine($"Students in class {targetClass}:");
        for (int i = 0; i < studentCount; i++)
        {
            if (students[i].Class == targetClass)
            {
                Console.WriteLine(students[i].ToString());
                found = true;
            }
        }

        if (!found)
        {
            Console.WriteLine($"No students in class {targetClass}.");
        }
    }
}